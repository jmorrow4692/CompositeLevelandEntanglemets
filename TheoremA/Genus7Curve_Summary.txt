////////////////////////////////////////////////////////////////////////////////////
// Computations for the mod 2 and mod 11 simultaneous computations
////////////////////////////////////////////////////////////////////////////////////

A2<s,t> := AffineSpace(Rationals(),2);
Q<x> := PolynomialRing(Integers());


Q<X> := PolynomialRing(Rationals());
A2<s,t> := AffineSpace(Rationals(),2);
Summ := [];



J11:=[-11^2,-11*131^3];  

G11:=[
	sub<GL(2,11) | {[-1,0,0,-1],[1,1,0,1],[4,0,0,6]}>,
	sub<GL(2,11) | {[-1,0,0,-1],[1,1,0,1],[5,0,0,7]}>,
	sub<GL(2,11) | {[1,-4,4,1], [1,0,0,-1]}>
	];

G2:=[
	sub<GL(2,2) | {[1,0,0,1]}>,
	sub<GL(2,2) | {[1,1,0,1]}>,
	sub<GL(2,2) | {[1,1,1,0]}>
	];


/////////////////
//Given two subgroups H1 in Gl2(Z/m) and H2 in Gl2(Z/n), computes the image of H1 times H2 in GL2(Z/mn) under the CRt isomorphism GL2(Z/mn) = GL2(Z/m) times GL2(Z/n)
/////////////////

ChineseRemainderThat := function(H1, H2)
	m := #BaseRing(H1);
	n := #BaseRing(H2);
	Gmn := GL(2, Integers(m*n));
	Gm := GL(2, Integers(m));
	Gn :=GL(2, Integers(n));
	gensm := Generators(H1);
	gensn:= Generators(H2);
	gensmn := [ ];
	for g in gensm do
		g1 := ChineseRemainderTheorem( [Integers() ! g[1,1], 1], [m, n]);
		g2 := ChineseRemainderTheorem( [Integers() ! g[1,2], 0], [m, n]);
		g3:=  ChineseRemainderTheorem( [Integers() ! g[2,1], 0], [m, n]);
		g4 := ChineseRemainderTheorem( [Integers() ! g[2,2], 1], [m, n]);
		gensmn := gensmn cat[Matrix(Integers(), [[g1, g2], [g3, g4]] ) ];
	end for;
	for g in gensn do
		g1 := ChineseRemainderTheorem( [Integers() ! g[1,1], 1], [n, m]);
		g2 := ChineseRemainderTheorem( [Integers() ! g[1,2], 0], [n, m]);
		g3:=  ChineseRemainderTheorem( [Integers() ! g[2,1], 0], [n, m]);
		g4 := ChineseRemainderTheorem( [Integers() ! g[2,2], 1], [n, m]);
		gensmn := gensmn cat[Matrix(Integers(), [[g1, g2], [g3, g4]] ) ];
	end for;
	return sub<Gmn | gensmn>;
end function;

//Trying Jeremy Rouse's idea for finding a lower level modular curve mapping to it by finding a subgroup which contains the subgroup G_3 x G_3 in GL(22)

//Some functions from Rouse, Zurieck-Brown, and Zywina
order := function(v,N)
  return #{m*v : m in [0..N-1]};
end function;

level := function(H)
  N := #BaseRing(H);
  return N, PrimeDivisors(N)[1];
end function;

hasRealPoints := function(H)
 N := level(H);
 V := RSpace(IntegerRing(N),2);
 return exists{A : A in H | 
   Trace(A) eq 0 
   and Determinant(A) eq -1 
   and exists{v : v in Eigenspace(A,1) | order(v,N) eq N}};
end function;

surjectiveDet := function(H)
  N := level(H);
  return #{Determinant(A) : A in H} eq EulerPhi(N);
end function;

isAdmissible := function(H)
  return hasRealPoints(H) and surjectiveDet(H);  
end function;

isNegId := function(H)
  return exists{v : v in H | v eq -Id(H)};
end function;

isModCurve := function(H)
  return isNegId(H) and surjectiveDet(H);
end function;

isOrder := function(H)
  S := Subgroups(H);
  SS := [];
  for i in [1..#S] do
    SS := SS cat [S[i]`subgroup];
  end for;
  return exists{A : A in SS | (Order(A) eq 30) };
end function;

// This function returns the genus, index, einfty, e2, and e3.

function genus2(G)
  md := Modulus(BaseRing(G));
  H := SL(2,Integers(md));
  S := H![0,-1,1,0];
  T := H![1,1,0,1];
  phi, perm := CosetAction(H,G meet H);
  lst := [phi(S),phi(T),phi(S*T)];
  //printf "Permutation for S = %o.\n",phi(S);
  //printf "Permutation for T = %o.\n",phi(T);
  //printf "Permutation for S*T = %o.\n",phi(S*T);
  cs := [CycleStructure(lst[i]) : i in [1..3]];
  gen := -2*Degree(perm) + 2;
  einfty := #Orbits(sub<perm | lst[2]>);
  e2 := #Fix(lst[1]);
  e3 := #Fix(lst[3]);
  ind := Degree(perm);
  for j in [1..3] do
    for i in [1..#cs[j]] do
      gen := gen + (cs[j][i][1]-1)*cs[j][i][2];
    end for;
  end for;
  gen := gen div 2;
//  printf "The genus = %o.\n",gen;
  genhur := 1 + (ind/12) - (e2/4) - (e3/3) - (einfty/2);
//  printf "The Hurwitz formula is %o = 1 + %o/12 - %o/4 - %o/3 - %o/2.\n",genhur,ind,e2,e3,einfty;
  return gen, ind, einfty, e2, e3;
end function;


/*----------------------------X_{G_3,G_3}(22)----------------------------------*/
P<x,y> := PolynomialRing(Rationals(),3); 
F := y^2 + y - (x^3 - x^2 - 7*x + 10);
f1 := x^2 + 3*x - 6;
f2 := 11*(x^2 - 5)*y + (2*x^4 + 23*x^3 - 72*x^2 - 28*x + 127);
f3:= 6*y + 11*x - 19;
f4 := 22*(x-2)*y + (5*x^3 + 17*x^2 - 112*x + 120);
f5 := 11*y+(2*x^2+17*x-34);
f6 := (x-4)*y-(5*x- 9); 
J11:= (f1*f2*f3*f4)^3/(f5^2*f6^11);
A3<X,Y,s> := AffineSpace(Rationals(),3); 
C3 := Curve(A3 , [Y^2 + Y - (X^3 - X^2 - 7*X + 10), (s^2+1728)*Evaluate(Denominator(J11),[X,Y,1]) - Evaluate(Numerator(J11),[X,Y,1])]);
PC3<S,X,Y,Z> := ProjectiveClosure(C3);
assert (Genus(PC3) eq 7);

// Run overnight to get a canonical model 
//Phi:= CanonicalMap(PC3);
//CQ<X,Y,Z> := CanonicalImage(PC3,Phi);
//CQ;

G := ChineseRemainderThat(G2[3],G11[3]);
assert (isAdmissible(G) eq true);
assert (isModCurve(G) eq true);
genus2(G);

// Note that the modular curve associated 
GG := GL(2,ResidueClassRing(22));
assert (IsMaximal(GL(2,ResidueClassRing(22)),G) eq false);
M := MaximalSubgroups(GG);

for i in [1..#M] do
if Order(M[i]`subgroup meet G) eq Order(G) then
  i; 
end if;
end for;

MG := M[9]`subgroup;
assert (isAdmissible(MG) eq true);
assert (isModCurve(MG) eq true);
genus2(MG);

MMG := MaximalSubgroups(MG);
for i in [1..#MMG] do
if Order(MMG[i]`subgroup meet G) eq Order(G) then
  i; 
end if;
end for;








